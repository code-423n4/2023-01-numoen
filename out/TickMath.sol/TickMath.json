{
  "abi": [],
  "bytecode": {
    "object": "0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000811000a",
    "sourceMap": "306:747:54:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;306:747:54;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000811000a",
    "sourceMap": "306:747:54:-:0;;;;;;;;",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/periphery/UniswapV3/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@prb/test/=lib/prb-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":prb-math/=lib/prb-math/contracts/\",\":src/=src/\"]},\"sources\":{\"src/periphery/UniswapV3/libraries/TickMath.sol\":{\"keccak256\":\"0x42ad56f8b26be218b4de31e71c775cf0e0a8efbf64d521da88bc44e8baa8d55b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://86142c0073174636e1156077a5867b7145d8f820d1073c4c21505565df023d9f\",\"dweb:/ipfs/QmNf81jHZZzZY5QEYvJ6yetMUyXGTHifQ3fxZZCjYhqakq\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@prb/test/=lib/prb-test/src/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":prb-math/=lib/prb-math/contracts/",
        ":src/=src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/periphery/UniswapV3/libraries/TickMath.sol": "TickMath"
      },
      "libraries": {}
    },
    "sources": {
      "src/periphery/UniswapV3/libraries/TickMath.sol": {
        "keccak256": "0x42ad56f8b26be218b4de31e71c775cf0e0a8efbf64d521da88bc44e8baa8d55b",
        "urls": [
          "bzz-raw://86142c0073174636e1156077a5867b7145d8f820d1073c4c21505565df023d9f",
          "dweb:/ipfs/QmNf81jHZZzZY5QEYvJ6yetMUyXGTHifQ3fxZZCjYhqakq"
        ],
        "license": "GPL-2.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/periphery/UniswapV3/libraries/TickMath.sol",
    "id": 32122,
    "exportedSymbols": {
      "TickMath": [
        32121
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:1009:54",
    "nodes": [
      {
        "id": 32101,
        "nodeType": "PragmaDirective",
        "src": "45:24:54",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0"
        ]
      },
      {
        "id": 32121,
        "nodeType": "ContractDefinition",
        "src": "306:747:54",
        "nodes": [
          {
            "id": 32107,
            "nodeType": "VariableDeclaration",
            "src": "438:43:54",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 32103,
              "nodeType": "StructuredDocumentation",
              "src": "327:108:54",
              "text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
            },
            "mutability": "constant",
            "name": "MIN_TICK",
            "nameLocation": "462:8:54",
            "scope": 32121,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_int24",
              "typeString": "int24"
            },
            "typeName": {
              "id": 32104,
              "name": "int24",
              "nodeType": "ElementaryTypeName",
              "src": "438:5:54",
              "typeDescriptions": {
                "typeIdentifier": "t_int24",
                "typeString": "int24"
              }
            },
            "value": {
              "id": 32106,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "nodeType": "UnaryOperation",
              "operator": "-",
              "prefix": true,
              "src": "473:8:54",
              "subExpression": {
                "hexValue": "3838375f323732",
                "id": 32105,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "474:7:54",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_887272_by_1",
                  "typeString": "int_const 887272"
                },
                "value": "887_272"
              },
              "typeDescriptions": {
                "typeIdentifier": "t_rational_minus_887272_by_1",
                "typeString": "int_const -887272"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 32112,
            "nodeType": "VariableDeclaration",
            "src": "595:44:54",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 32108,
              "nodeType": "StructuredDocumentation",
              "src": "485:107:54",
              "text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
            },
            "mutability": "constant",
            "name": "MAX_TICK",
            "nameLocation": "619:8:54",
            "scope": 32121,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_int24",
              "typeString": "int24"
            },
            "typeName": {
              "id": 32109,
              "name": "int24",
              "nodeType": "ElementaryTypeName",
              "src": "595:5:54",
              "typeDescriptions": {
                "typeIdentifier": "t_int24",
                "typeString": "int24"
              }
            },
            "value": {
              "id": 32111,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "nodeType": "UnaryOperation",
              "operator": "-",
              "prefix": true,
              "src": "630:9:54",
              "subExpression": {
                "id": 32110,
                "name": "MIN_TICK",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 32107,
                "src": "631:8:54",
                "typeDescriptions": {
                  "typeIdentifier": "t_int24",
                  "typeString": "int24"
                }
              },
              "typeDescriptions": {
                "typeIdentifier": "t_int24",
                "typeString": "int24"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 32116,
            "nodeType": "VariableDeclaration",
            "src": "763:56:54",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 32113,
              "nodeType": "StructuredDocumentation",
              "src": "644:116:54",
              "text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
            },
            "mutability": "constant",
            "name": "MIN_SQRT_RATIO",
            "nameLocation": "789:14:54",
            "scope": 32121,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint160",
              "typeString": "uint160"
            },
            "typeName": {
              "id": 32114,
              "name": "uint160",
              "nodeType": "ElementaryTypeName",
              "src": "763:7:54",
              "typeDescriptions": {
                "typeIdentifier": "t_uint160",
                "typeString": "uint160"
              }
            },
            "value": {
              "hexValue": "345f3239355f3132385f373339",
              "id": 32115,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "806:13:54",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_4295128739_by_1",
                "typeString": "int_const 4295128739"
              },
              "value": "4_295_128_739"
            },
            "visibility": "internal"
          },
          {
            "id": 32120,
            "nodeType": "VariableDeclaration",
            "src": "942:108:54",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 32117,
              "nodeType": "StructuredDocumentation",
              "src": "823:116:54",
              "text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
            },
            "mutability": "constant",
            "name": "MAX_SQRT_RATIO",
            "nameLocation": "968:14:54",
            "scope": 32121,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint160",
              "typeString": "uint160"
            },
            "typeName": {
              "id": 32118,
              "name": "uint160",
              "nodeType": "ElementaryTypeName",
              "src": "942:7:54",
              "typeDescriptions": {
                "typeIdentifier": "t_uint160",
                "typeString": "uint160"
              }
            },
            "value": {
              "hexValue": "315f3436315f3434365f3730335f3438355f3231305f3130335f3238375f3237335f3035325f3230335f3938385f3832325f3337385f3732335f3937305f333432",
              "id": 32119,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "985:65:54",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
                "typeString": "int_const 1461...(41 digits omitted)...0342"
              },
              "value": "1_461_446_703_485_210_103_287_273_052_203_988_822_378_723_970_342"
            },
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "TickMath",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 32102,
          "nodeType": "StructuredDocumentation",
          "src": "71:235:54",
          "text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          32121
        ],
        "name": "TickMath",
        "nameLocation": "314:8:54",
        "scope": 32122,
        "usedErrors": []
      }
    ],
    "license": "GPL-2.0-or-later"
  },
  "id": 54
}